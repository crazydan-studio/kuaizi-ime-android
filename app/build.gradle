plugins {
    id 'com.android.application'
    id 'com.tencent.vasdolly'
}

android {
    namespace 'org.crazydan.studio.app.ime.kuaizi'
    compileSdk 35

    defaultConfig {
        applicationId 'org.crazydan.studio.app.ime.kuaizi'
        minSdk 25
        targetSdk 35
        // https://developer.android.com/studio/publish/versioning
        versionCode 210
        versionName '2.1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    // 显式启用在 buildTypes 中对 buildConfigField 的使用支持
    // https://stackoverflow.com/questions/74634321/fixing-the-build-type-contains-custom-buildconfig-fields-but-the-feature-is-di#answer-74634322
    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        // 开发调试版本
        debug {
            // 应用 id 添加调试信息后缀
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'

            //minifyEnabled false
            //shrinkResources false
            //zipAlignEnabled true

            buildConfigField('String', 'BUILD_TYPE', '"debug"')
        }
        // 正式发布版本
        release {
            // https://juejin.cn/post/6844904103131234311
            // 是否进行混淆
            minifyEnabled true
            // 移除无用的resource文件：当ProGuard 把部分无用代码移除的时候，
            // 这些代码所引用的资源也会被标记为无用资源，然后
            // 系统通过资源压缩功能将它们移除。
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中
            // 定义的资源（例如字符串、尺寸、样式和颜色）
            // 开启后，Android构建工具会通过ResourceUsageAnalyzer来检查
            // 哪些资源是无用的，当检查到无用的资源时会把该资源替换
            // 成预定义的版本。主要是针对.png、.9.png、.xml提供了
            // TINY_PNG、TINY_9PNG、TINY_XML这3个byte数组的预定义版本。
            // 资源压缩工具默认是采用安全压缩模式来运行，可以通过开启严格压缩模式来达到更好的瘦身效果。
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField('String', 'BUILD_TYPE', '"release"')
        }
        // 内测版本
        alpha {
            initWith release

            applicationIdSuffix '.alpha'
            versionNameSuffix '-alpha'

            // https://developer.android.com/build/gradle-tips#share-custom-fields-and-resource-values-with-your-app-code
            buildConfigField('String', 'BUILD_TYPE', '"alpha"')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'debug') {
        return
    }

    // 修改 APK 输出路径，统一放在 build/outputs/apk 下
    // https://stackoverflow.com/questions/46985530/change-apk-output-folder-in-gradle-4-1#answer-46987692
    // https://stackoverflow.com/questions/54206898/variantoutput-getpackageapplication-is-obsolete#answer-56164030
    variant.outputs.all {
        def baseOutputDir = "${project.buildDir.absolutePath}/outputs/apk/${variant.buildType.name}"
        def projectName = rootProject.name.replaceAll('\\s+', '_')
        def versionName = variant.versionName

        outputFileName = "${projectName}-${versionName}.apk"
        variant.packageApplicationProvider.get().outputDirectory = new File(baseOutputDir)
    }
}
// Note：以下代码不能放在 android 中初始化
android.buildTypes.all { buildType ->
    // 统一配置 APK 签署证书
    // https://developer.android.com/build/gradle-tips#sign-your-app
    // https://stackoverflow.com/questions/17040494/signing-product-flavors-with-gradle#answer-65811638
    def keystorePropsFile = new File("${rootProject.rootDir.absolutePath}/keystore/${buildType.name}.properties")
    if (keystorePropsFile.exists()) {
        def keystoreProps = new Properties()
        keystoreProps.load(new FileInputStream(keystorePropsFile))

        buildType.signingConfig = android.signingConfigs.create(buildType.name)
        buildType.signingConfig.storeFile = new File(keystoreProps['storeFile'])
        buildType.signingConfig.storePassword = keystoreProps['storePassword']
        buildType.signingConfig.keyAlias = keystoreProps['keyAlias']
        buildType.signingConfig.keyPassword = keystoreProps['keyPassword']
    }
}

dependencies {
    //implementation 'com.tencent.vasdolly:helper:3.0.6'

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.12.0'
    // https://jitpack.io/#Hexworks/Mixite/2020.1.0
    // https://github.com/Hexworks/mixite
    // Note: Java 版本的包名需添加后缀 -jvm
    implementation 'com.github.Hexworks.Mixite:mixite.core-jvm:2020.1.0'
    // https://github.com/google/flexbox-layout
    // https://blog.csdn.net/weixin_39397471/article/details/90212231
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    testImplementation 'junit:junit:4.13.2'
    // 在单元测试中引入真实的依赖包: 未引入依赖的接口均为 Mock 接口
    testImplementation 'org.json:json:20230618'
    testImplementation 'com.google.code.gson:gson:2.10.1'

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}